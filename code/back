queried_classes_counter = Counter()

N_QUERIES = 50
performance_history = [unqueried_score]

# Allow our model to query our unlabeled dataset for the most
# informative points according to our query strategy (uncertainty sampling).
for index in range(N_QUERIES):
  query_index, query_instance = learner.query(X_pool)

  print(f"{index+1}. iteration: Chosen sample was of a class: {y_pool[query_index]}")
  queried_classes_counter.update(y_pool[query_index])

  # Teach our ActiveLearner model the record it has requested.
  X, y = X_pool[query_index].reshape(1, -1), y_pool[query_index].reshape(1, )
  learner.teach(X=X, y=y)

  # Remove the queried instance from the unlabeled pool.
  X_pool, y_pool = np.delete(X_pool, query_index, axis=0), np.delete(y_pool, query_index)

  # Calculate and report our model's accuracy.
  y_pred = learner.predict(X_test)
  print(50*'-')
  model_accuracy = method_eval(y_test=y_test, y_pred=y_pred, verbose=VERBOSE)
  print(50*'-')

  # Save our model's performance for plotting.
  performance_history.append(model_accuracy)

print(f"Queried samples:\n {queried_classes_counter}")